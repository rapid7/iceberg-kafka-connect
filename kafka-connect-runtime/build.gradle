plugins {
  id "distribution"
}

task downloadIcebergJars {
  doLast {
    def downloadDir = file("$buildDir/libs")
    downloadDir.mkdirs()

    def urls = [
            "https://artifacts.bos.rapid7.com/artifactory/releases/transport/iceberg-fips/1.6.x/1746026749/iceberg-aws-bundle-1.7.0-SNAPSHOT.jar",
            "https://artifacts.bos.rapid7.com/artifactory/releases/transport/iceberg-fips/1.6.x/1746026749/iceberg-azure-bundle-1.7.0-SNAPSHOT.jar"
    ]

    urls.each { urlString ->
      def url = new URL(urlString)
      def fileName = urlString.tokenize("/")[-1]
      def destination = new File(downloadDir, fileName)

      if (!destination.exists()) {
        println "Downloading: ${fileName}"
        destination.withOutputStream { out ->
          url.openStream().withStream { inStream ->
            out << inStream
          }
        }
      } else {
        println "${fileName} already exists."
      }
    }
  }
}

configurations {
  hive {
    extendsFrom runtimeClasspath
  }
  all {
    resolutionStrategy.force "org.codehaus.jettison:jettison:1.5.4"
    resolutionStrategy.force "org.xerial.snappy:snappy-java:1.1.10.5"
    resolutionStrategy.force "org.apache.commons:commons-compress:1.26.0"
    resolutionStrategy.force "org.apache.hadoop.thirdparty:hadoop-shaded-guava:1.1.1-tabular"
    resolutionStrategy.force "io.airlift:aircompressor:0.27"
    resolutionStrategy.force "org.apache.parquet:parquet-avro:1.15.1"
    resolutionStrategy.eachDependency { details ->
      if (details.requested.group == "io.netty") {
        details.useVersion "4.1.118.Final"
      }
    }
  }
}

dependencies {
  implementation project(":iceberg-kafka-connect")
  implementation project(":iceberg-kafka-connect-transforms")
  implementation(libs.hadoop.common) {
    exclude group: "log4j"
    exclude group: "org.slf4j"
    exclude group: "ch.qos.reload4j"
    exclude group: "org.apache.avro", module: "avro"
    exclude group: "com.google.guava"
    exclude group: "com.google.protobuf"
    exclude group: "org.apache.curator"
    exclude group: "org.apache.zookeeper"
    exclude group: "org.apache.kerby"
    exclude group: "org.apache.hadoop", module: "hadoop-auth"
    exclude group: "org.apache.commons", module: "commons-configuration2"
    exclude group: "org.apache.hadoop.thirdparty", module: "hadoop-shaded-protobuf_3_7"
    exclude group: "org.eclipse.jetty"
  }
  runtimeOnly libs.bundles.iceberg.ext

  hive libs.iceberg.hive.metastore
  hive(libs.hive.metastore) {
    exclude group: "org.apache.avro", module: "avro"
    exclude group: "org.slf4j", module: "slf4j-log4j12"
    exclude group: "org.pentaho" // missing dependency
    exclude group: "org.apache.hbase"
    exclude group: "org.apache.logging.log4j"
    exclude group: "co.cask.tephra"
    exclude group: "com.google.code.findbugs", module: "jsr305"
    exclude group: "org.eclipse.jetty.aggregate", module: "jetty-all"
    exclude group: "org.eclipse.jetty.orbit", module: "javax.servlet"
    exclude group: "org.apache.parquet", module: "parquet-hadoop-bundle"
    exclude group: "com.tdunning", module: "json"
    exclude group: "javax.transaction", module: "transaction-api"
    exclude group: "com.zaxxer", module: "HikariCP"
    exclude group: "org.apache.hadoop", module: "hadoop-yarn-server-common"
    exclude group: "org.apache.hadoop", module: "hadoop-yarn-server-applicationhistoryservice"
    exclude group: "org.apache.hadoop", module: "hadoop-yarn-server-resourcemanager"
    exclude group: "org.apache.hadoop", module: "hadoop-yarn-server-web-proxy"
    exclude group: "org.apache.hive", module: "hive-service-rpc"
    exclude group: "com.github.joshelser", module: "dropwizard-metrics-hadoop-metrics2-reporter"
  }
  hive(libs.hadoop.client) {
    exclude group: "org.apache.avro", module: "avro"
    exclude group: "org.slf4j", module: "slf4j-log4j12"
  }

  testImplementation libs.bundles.iceberg
  testImplementation files("$buildDir/libs/iceberg-aws-bundle-1.7.0-SNAPSHOT.jar")
  testImplementation files("$buildDir/libs/iceberg-azure-bundle-1.7.0-SNAPSHOT.jar")

  implementation files("$buildDir/libs/iceberg-aws-bundle-1.7.0-SNAPSHOT.jar")
  implementation files("$buildDir/libs/iceberg-azure-bundle-1.7.0-SNAPSHOT.jar")

  testImplementation libs.bundles.jackson
  testImplementation libs.bundles.kafka.connect

  testImplementation libs.junit.api
  testImplementation libs.junit.params
  testRuntimeOnly libs.junit.engine

  testImplementation libs.mockito
  testImplementation libs.assertj
  testImplementation libs.awaitility
  testImplementation libs.testcontainers
  testImplementation libs.testcontainers.kafka
  testImplementation libs.http.client
}

processResources {
  filter {
    it.replace("__VERSION__", project.version.toString())
  }
}

distributions {
  main {
    contents {
      from(processResources.destinationDir) {
        include "manifest.json"
      }
      into("lib/") {
        from configurations.runtimeClasspath
      }
      into("doc/") {
        from "$rootDir/LICENSE"
        from "$rootDir/README.md"
      }
      into("assets/") {
        from "$rootDir/logos"
      }
    }
  }
  hive {
    contents {
      from(processResources.destinationDir) {
        include "manifest.json"
      }
      into("lib/") {
        from configurations.hive
      }
      into("doc/") {
        from "$rootDir/LICENSE"
        from "$rootDir/README.md"
      }
      into("assets/") {
        from "$rootDir/logos"
      }
    }
  }
}

publishing {
  publications {
    main(MavenPublication) {
      artifact distZip
    }
    hive(MavenPublication) {
      artifact hiveDistZip
    }
  }
}

tasks.jar.enabled = false

tasks.distTar.enabled = false
distZip.dependsOn processResources
installDist.dependsOn processResources

tasks.hiveDistTar.enabled = false
hiveDistZip.dependsOn processResources
installHiveDist.dependsOn processResources

// build the install before test so it can be installed into kafka connect
test.dependsOn installDist

tasks.compileJava.dependsOn downloadIcebergJars

assemble.dependsOn distZip, hiveDistZip
